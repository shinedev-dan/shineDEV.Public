<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ output extension="SQL" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>

<#@ assembly name="$(ProjectDir)/bin/Common.dll" #>
<#@ import namespace="Common.Helpers" #>
<#@ include file="Utils.tt" once="true" #>

<#+ public void GenerateDeleteFlag(Database db, String t)  {
	Table table = new Table(db, t);
	table.Refresh();

	var valid = false;
	foreach (Column column in table.Columns)
    {
        if (String.Equals(column.Name, "Deleted", StringComparison.InvariantCultureIgnoreCase))
		{
            valid = true;
			break;
		}
    }

	if(!valid)
		return;

	var spName = String.Format("usp_{0}_DeleteFlag", table.Name);
	CheckSpExists(spName);

	WriteLine(String.Format("ALTER PROCEDURE [dbo].[{0}]", spName));
	WriteLine("(");
	PushIndent("\t");
	var first = true;
	foreach (Column column in T4Helper.Sql.GetColumns(table, true, false))
    {
        WriteLine(String.Format("{0}{1}"
			, first ? String.Empty : ", "
			, T4Helper.Sql.GetColumnDeclaration(column)));
		if(first)
			first = false;
    }
	WriteLine(", @Deleted BIT = 1");
    PopIndent();
	WriteLine(")");
	WriteLine("AS");
	WriteLine("BEGIN");

	PushIndent("\t");
	WriteLine("SET NOCOUNT ON;");
	WriteLine("UPDATE");
	PushIndent("\t");
	WriteLine(String.Format("[dbo].[{0}]", table.Name));
	PopIndent();
	WriteLine("SET");
	PushIndent("\t");
	WriteLine("[Deleted] = @Deleted");
	PopIndent();
	WriteLine("WHERE");
    PushIndent("\t");
    first = true;
    foreach (Column column in T4Helper.Sql.GetColumns(table, true, false))
    {
        WriteLine(String.Format("{0}[{1}] = @{1}"
			, first ? String.Empty : " AND "
			, column.Name));
		if(first)
			first = false;
    }
    PopIndent();
	PopIndent();
	WriteLine("END");
	WriteLine(String.Empty);
	WriteLine("GO");
	WriteLine(String.Empty);
	WriteLine(String.Empty);

} #>