<#@ template debug="false" hostspecific="false" language="C#" #>

<#@ output extension="cs" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="Microsoft.SqlServer.ConnectionInfo" #>
<#@ assembly name="Microsoft.SqlServer.Smo" #>
<#@ assembly name="Microsoft.SqlServer.Management.Sdk.Sfc" #>
<#@ import namespace="Microsoft.SqlServer.Management.Smo" #>
<#@ import namespace="System.Collections.Generic" #>

<#@ assembly name="$(ProjectDir)/bin/Common.dll" #>
<#@ import namespace="Common.Helpers" #>
<#@ include file="Utils.tt" once="true" #>

<# 
	Server server = new Server("localhost\\DEVDB1");
    Database db = new Database(server, "shineDEV.Template");
	var tables = new List<String>(new String[] { "FlightStatus", "FlightStatusData", "FlightStatusUpdate", "FlightStatusRequest" });

	foreach(var t in tables) 
	{
		Table table = new Table(db, t);
		table.Refresh();
		OutputClass("DAL.Models", table);
	}

#>

<#+
    void OutputClass(string namespaceName, Table table)
    {
#>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using Dapper;
using System.Data.SqlClient;
using Common.Helpers;
using System.Data;
using Common.Extensions;
using Dapper;

namespace <#= namespaceName #>
{
    public class <#= table.Name #>
    {
<#+
        PushIndent("\t\t");
        var properties = T4Helper.Poco.GatherProperties(table.Columns);
#>
<#= String.Join(System.Environment.NewLine, properties) #>
[BulkSaveExtensions.BulkSaveModify]
public Int64? BulkSaveId { get; set; }
[BulkSaveExtensions.BulkSaveModify]
public String UpsertAction { get; set; }
<#+
        PopIndent();
#>

		public static <#= table.Name #> Get(<#= T4Helper.Poco.GetFunctionParams(T4Helper.Sql.GetColumns(table, true, false)) #>)
        {
            using (var cnn = DbHelper.CreateOpenConnection(DbHelper.Database.Default))
				return cnn.Query<<#= table.Name #>>("usp_<#= table.Name #>_Get", new { <#= T4Helper.Poco.GetDapperParams(T4Helper.Sql.GetColumns(table, true, false)) #> }, null, false, null, CommandType.StoredProcedure).FirstOrDefault();
        }

		public void Insert() 
		{
            using (var cnn = DbHelper.CreateOpenConnection(DbHelper.Database.Default))
                this.Id = cnn.Query<Int64>("usp_<#= table.Name #>_Insert", generateParams(this, false, true), null, true, null, CommandType.StoredProcedure).FirstOrDefault();
        }

		public void Update() 
		{
            using (var cnn = DbHelper.CreateOpenConnection(DbHelper.Database.Default))
                cnn.Query("usp_<#= table.Name #>_Update", generateParams(this, false, true), null, true, null, CommandType.StoredProcedure);
        }

        public void Upsert() 
		{
            using (var cnn = DbHelper.CreateOpenConnection(DbHelper.Database.Default))
			{
                var reader = cnn.ExecuteReader("usp_<#= table.Name #>_Upsert", generateParams(this, true, true), null, null, CommandType.StoredProcedure);
				while(reader.Read())
				{
					this.Id = Convert.ToInt64(reader["Id"].ToString());
					this.UpsertAction = reader["UpsertAction"].ToString();
				}
			}
        }

        public static void UpsertBulk(List<<#= table.Name #>> list)
        {
            using (var cnn = DbHelper.CreateOpenConnection(DbHelper.Database.Default))
                list.BulkSave(null, "usp_<#= table.Name #>_Upsert_Bulk", 250, 30, "<#= table.Name #>");
            // var insertedCount = list.Count(o => o.UpsertAction.Matches("INSERT"));
        }

        public static void DeleteFlag(<#= T4Helper.Poco.GetFunctionParams(T4Helper.Sql.GetColumns(table, true, false)) #>, Boolean delete)
        {
            using (var cnn = DbHelper.CreateOpenConnection(DbHelper.Database.Default))
                cnn.Query("usp_<#= table.Name #>_DeleteFlag", new { <#= T4Helper.Poco.GetDapperParams(T4Helper.Sql.GetColumns(table, true, false)) #>, Delete = delete }, null, true, null, CommandType.StoredProcedure);
        }

        private static object generateParams(<#= table.Name #> obj, Boolean incPK, Boolean incNonPK)
        {
			var dbArgs = new DynamicParameters();
<#+
		PushIndent("\t\t\t");
		foreach (Column column in T4Helper.Sql.GetColumns(table, true, false))
		{
			WriteLine(String.Format("if({0}) dbArgs.Add(\"{1}\", obj.{1});", "incPK", column.Name));
		}
		foreach (Column column in T4Helper.Sql.GetColumns(table, false, true))
		{
			WriteLine(String.Format("if({0}) dbArgs.Add(\"{1}\", obj.{1});", "incNonPK", column.Name));
		}
		WriteLine("return dbArgs;");
		PopIndent();
#>
        }
	}
}


<#+
    }
#>